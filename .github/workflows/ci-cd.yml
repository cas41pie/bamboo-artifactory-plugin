name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [ published ]

env:
  JFROG_MAVEN_REPO: "almpoc-mvn-snapshot-local"          # Maven repository for JAR and POM files
  JFROG_GENERIC_REPO: "generic-local"      # Generic repository for OBR files

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Run tests
        run: mvn clean test -B

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: target/surefire-reports/

  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Extract version from pom
        id: version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Build plugin
        run: mvn clean package -B -DskipTests

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: plugin-artifacts
          path: |
            target/*.jar
            target/*.obr
          retention-days: 30

      - name: Create release artifacts (master branch only)
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: |
          mkdir -p release-artifacts
          cp target/bamboo-artifactory-plugin-*.jar release-artifacts/
          cp target/bamboo-artifactory-plugin-*.obr release-artifacts/
          ls -la release-artifacts/

      - name: Upload release artifacts
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: release-artifacts/
          retention-days: 90

  publish:
    name: Publish to GitHub Releases
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: release-artifacts/

      - name: Extract version from pom
        id: version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          # Create a clean version for releases (remove SNAPSHOT if present)
          CLEAN_VERSION=$(echo $VERSION | sed 's/-SNAPSHOT//')
          echo "clean_version=$CLEAN_VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION, Clean: $CLEAN_VERSION"

      - name: Generate release notes
        id: release_notes
        run: |
          COMMIT_SHA=$(git rev-parse --short HEAD)
          COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          BUILD_DATE=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          cat > release_notes.md << EOF
          ## Bamboo Artifactory Plugin - Build ${{ steps.version.outputs.clean_version }}
          
          **Build Information:**
          - **Commit:** ${COMMIT_SHA}
          - **Date:** ${BUILD_DATE}
          - **Branch:** master
          - **Last Commit:** ${COMMIT_MSG}
          - **Build Number:** ${{ github.run_number }}
          
          **Artifacts:**
          Primary artifacts are deployed to Vanderlande JFrog Artifactory. GitHub releases serve as backup.
          
          - \`bamboo-artifactory-plugin-${{ steps.version.outputs.version }}.jar\` - Main plugin JAR
          - \`bamboo-artifactory-plugin-${{ steps.version.outputs.version }}.obr\` - OSGi Bundle Repository
          - \`bamboo-artifactory-plugin-${{ steps.version.outputs.version }}-sources.jar\` - Source code
          - \`bamboo-artifactory-plugin-${{ steps.version.outputs.version }}.pom\` - Maven POM file
          
          **JFrog Artifactory Locations:**
          - **Maven Repository:** \`${{ env.JFROG_MAVEN_REPO }}/org/jfrog/bamboo/bamboo-artifactory-plugin/${{ steps.version.outputs.version }}/\`
          - **Generic Repository:** \`${{ env.JFROG_GENERIC_REPO }}/bamboo-artifactory-plugin/${{ steps.version.outputs.version }}/\`
          
          **Installation:**
          1. Download the \`.jar\` file from Vanderlande JFrog Artifactory or GitHub assets below
          2. Install via Bamboo Administration → Manage apps → Upload app
          3. Restart your Bamboo instance if required
          
          **Documentation:**
          - [Bamboo Artifactory Plugin User Guide](https://jfrog.com/help/r/jfrog-integrations-documentation/bamboo-artifactory-plug-in)
          - [Atlassian Marketplace](https://plugins.atlassian.com/plugin/details/27818)
          EOF

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ secrets.JFROG_URL }}
          JF_USER: ${{ secrets.JFROG_USERNAME }}
          JF_PASSWORD: ${{ secrets.JFROG_API_KEY }}

      - name: Verify JFrog Connection
        run: |
          echo "Testing connection to JFrog Artifactory..."
          jf rt ping
          echo "✅ JFrog connection successful"

      - name: Upload Artifacts to JFrog Artifactory
        run: |
          echo "🚀 Uploading artifacts to Vanderlande JFrog Artifactory..."
          
          # Set build information
          BUILD_NAME="${{ github.repository }}"
          BUILD_NUMBER="${{ github.run_number }}"
          COMMIT_SHA=$(git rev-parse --short HEAD)
          
          # Collect environment and Git information for build info
          jf rt build-collect-env $BUILD_NAME $BUILD_NUMBER
          jf rt build-add-git $BUILD_NAME $BUILD_NUMBER
          
          # Upload JAR files to Maven repository with proper Maven layout
          echo "📦 Uploading JAR files to Maven repository..."
          jf rt upload "release-artifacts/bamboo-artifactory-plugin-${{ steps.version.outputs.version }}.jar" \
            "${{ env.JFROG_MAVEN_REPO }}/org/jfrog/bamboo/bamboo-artifactory-plugin/${{ steps.version.outputs.version }}/" \
            --build-name="$BUILD_NAME" \
            --build-number="$BUILD_NUMBER" \
            --props="build.name=$BUILD_NAME;build.number=$BUILD_NUMBER;vcs.revision=$COMMIT_SHA;branch=${{ github.ref_name }}"
          
          # Upload sources JAR
          if [ -f "release-artifacts/bamboo-artifactory-plugin-${{ steps.version.outputs.version }}-sources.jar" ]; then
            echo "📦 Uploading sources JAR..."
            jf rt upload "release-artifacts/bamboo-artifactory-plugin-${{ steps.version.outputs.version }}-sources.jar" \
              "${{ env.JFROG_MAVEN_REPO }}/org/jfrog/bamboo/bamboo-artifactory-plugin/${{ steps.version.outputs.version }}/" \
              --build-name="$BUILD_NAME" \
              --build-number="$BUILD_NUMBER" \
              --props="build.name=$BUILD_NAME;build.number=$BUILD_NUMBER;vcs.revision=$COMMIT_SHA;branch=${{ github.ref_name }}"
          fi
          
          # Generate and upload POM file for Maven compatibility
          echo "📦 Generating and uploading POM file..."
          cat > release-artifacts/bamboo-artifactory-plugin-${{ steps.version.outputs.version }}.pom << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <project xmlns="http://maven.apache.org/POM/4.0.0"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                   http://maven.apache.org/xsd/maven-4.0.0.xsd">
              <modelVersion>4.0.0</modelVersion>
              <groupId>org.jfrog.bamboo</groupId>
              <artifactId>bamboo-artifactory-plugin</artifactId>
              <version>${{ steps.version.outputs.version }}</version>
              <packaging>atlassian-plugin</packaging>
              <name>Bamboo Artifactory Plugin</name>
              <description>Artifactory Build Info plugin for Atlassian Bamboo</description>
              <url>https://github.com/${{ github.repository }}</url>
              <scm>
                  <url>https://github.com/${{ github.repository }}</url>
                  <connection>scm:git:git@github.com:${{ github.repository }}.git</connection>
              </scm>
              <properties>
                  <maven.compiler.source>17</maven.compiler.source>
                  <maven.compiler.target>17</maven.compiler.target>
                  <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
              </properties>
          </project>
          EOF
          
          # Upload POM file
          jf rt upload "release-artifacts/bamboo-artifactory-plugin-${{ steps.version.outputs.version }}.pom" \
            "${{ env.JFROG_MAVEN_REPO }}/org/jfrog/bamboo/bamboo-artifactory-plugin/${{ steps.version.outputs.version }}/" \
            --build-name="$BUILD_NAME" \
            --build-number="$BUILD_NUMBER" \
            --props="build.name=$BUILD_NAME;build.number=$BUILD_NUMBER;vcs.revision=$COMMIT_SHA;branch=${{ github.ref_name }}"
          
          # Upload OBR files to Generic repository
          echo "📦 Uploading OBR files to Generic repository..."
          jf rt upload "release-artifacts/bamboo-artifactory-plugin-${{ steps.version.outputs.version }}.obr" \
            "${{ env.JFROG_GENERIC_REPO }}/bamboo-artifactory-plugin/${{ steps.version.outputs.version }}/" \
            --build-name="$BUILD_NAME" \
            --build-number="$BUILD_NUMBER" \
            --props="build.name=$BUILD_NAME;build.number=$BUILD_NUMBER;vcs.revision=$COMMIT_SHA;branch=${{ github.ref_name }}"
          
          # Publish build information to JFrog
          echo "📊 Publishing build information..."
          jf rt build-publish $BUILD_NAME $BUILD_NUMBER
          
          echo "✅ All artifacts successfully uploaded to Vanderlande JFrog Artifactory!"
          echo "📍 Maven artifacts: ${{ env.JFROG_MAVEN_REPO }}/org/jfrog/bamboo/bamboo-artifactory-plugin/${{ steps.version.outputs.version }}/"
          echo "📍 OBR artifacts: ${{ env.JFROG_GENERIC_REPO }}/bamboo-artifactory-plugin/${{ steps.version.outputs.version }}/"

      - name: Create/Update Release
        uses: ncipollo/release-action@v1
        with:
          tag: "v${{ steps.version.outputs.clean_version }}-${{ github.run_number }}"
          name: "Bamboo Artifactory Plugin v${{ steps.version.outputs.clean_version }} (Build ${{ github.run_number }})"
          bodyFile: release_notes.md
          artifacts: "release-artifacts/*"
          allowUpdates: true
          removeArtifacts: true
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, 'SNAPSHOT') }}
          token: ${{ secrets.GITHUB_TOKEN }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/master'
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Run dependency check
        run: |
          mvn org.owasp:dependency-check-maven:check -DfailBuildOnCVSS=7 -Dformat=XML || true

      - name: Upload dependency check results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-check-results
          path: target/dependency-check-report.xml
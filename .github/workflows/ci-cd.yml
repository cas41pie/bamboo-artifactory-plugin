name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [ published ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Run tests
        run: mvn clean test -B

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: target/surefire-reports/

  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Extract version from pom
        id: version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Build plugin
        run: mvn clean package -B -DskipTests

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: plugin-artifacts
          path: |
            target/*.jar
            target/*.obr
          retention-days: 30

      - name: Create release artifacts (master branch only)
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: |
          mkdir -p release-artifacts
          cp target/bamboo-artifactory-plugin-*.jar release-artifacts/
          cp target/bamboo-artifactory-plugin-*.obr release-artifacts/
          ls -la release-artifacts/

      - name: Upload release artifacts
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: release-artifacts/
          retention-days: 90

  publish:
    name: Publish to GitHub Releases
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: release-artifacts/

      - name: Extract version from pom
        id: version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          # Create a clean version for releases (remove SNAPSHOT if present)
          CLEAN_VERSION=$(echo $VERSION | sed 's/-SNAPSHOT//')
          echo "clean_version=$CLEAN_VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION, Clean: $CLEAN_VERSION"

      - name: Generate release notes
        id: release_notes
        run: |
          COMMIT_SHA=$(git rev-parse --short HEAD)
          COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          BUILD_DATE=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          cat > release_notes.md << EOF
          ## Bamboo Artifactory Plugin - Build ${{ steps.version.outputs.clean_version }}
          
          **Build Information:**
          - **Commit:** ${COMMIT_SHA}
          - **Date:** ${BUILD_DATE}
          - **Branch:** master
          - **Last Commit:** ${COMMIT_MSG}
          
          **Artifacts:**
          - \`bamboo-artifactory-plugin-${{ steps.version.outputs.version }}.jar\` - Main plugin JAR
          - \`bamboo-artifactory-plugin-${{ steps.version.outputs.version }}.obr\` - OSGi Bundle Repository
          - \`bamboo-artifactory-plugin-${{ steps.version.outputs.version }}-sources.jar\` - Source code
          
          **Installation:**
          1. Download the \`.jar\` file from the assets below
          2. Install via Bamboo Administration → Manage apps → Upload app
          3. Restart your Bamboo instance if required
          
          For full documentation, see the [Bamboo Artifactory Plugin User Guide](https://jfrog.com/help/r/jfrog-integrations-documentation/bamboo-artifactory-plug-in).
          EOF

      - name: Create/Update Release
        uses: ncipollo/release-action@v1
        with:
          tag: "v${{ steps.version.outputs.clean_version }}-${{ github.run_number }}"
          name: "Bamboo Artifactory Plugin v${{ steps.version.outputs.clean_version }} (Build ${{ github.run_number }})"
          bodyFile: release_notes.md
          artifacts: "release-artifacts/*"
          allowUpdates: true
          removeArtifacts: true
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, 'SNAPSHOT') }}
          token: ${{ secrets.GITHUB_TOKEN }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/master'
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Run dependency check
        run: |
          mvn org.owasp:dependency-check-maven:check -DfailBuildOnCVSS=7 -Dformat=XML || true

      - name: Upload dependency check results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-check-results
          path: target/dependency-check-report.xml
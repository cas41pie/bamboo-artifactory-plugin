name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - custom
      custom_version:
        description: 'Custom version (only if version_type is custom)'
        required: false
        type: string
      create_release:
        description: 'Create GitHub Release'
        required: true
        default: true
        type: boolean
      pre_release:
        description: 'Mark as pre-release'
        required: true
        default: false
        type: boolean

jobs:
  release:
    name: Manual Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Calculate new version
        id: version
        run: |
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Remove -SNAPSHOT suffix if present
          BASE_VERSION=$(echo $CURRENT_VERSION | sed 's/-SNAPSHOT//')
          
          if [ "${{ github.event.inputs.version_type }}" = "custom" ]; then
            NEW_VERSION="${{ github.event.inputs.custom_version }}"
          else
            # Parse version parts
            IFS='.' read -ra VERSION_PARTS <<< "$BASE_VERSION"
            MAJOR=${VERSION_PARTS[0]}
            MINOR=${VERSION_PARTS[1]}
            PATCH=${VERSION_PARTS[2]:-0}
            
            case "${{ github.event.inputs.version_type }}" in
              "major")
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              "minor")
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              "patch")
                PATCH=$((PATCH + 1))
                ;;
            esac
            
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          fi
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"
          echo "New version: $NEW_VERSION"

      - name: Update version in pom.xml
        run: |
          mvn versions:set -DnewVersion=${{ steps.version.outputs.new_version }} -DgenerateBackupPoms=false

      - name: Run tests
        run: mvn clean test -B

      - name: Build release artifacts
        run: mvn clean package -B -DskipTests

      - name: Prepare release artifacts
        run: |
          mkdir -p release-artifacts
          cp target/bamboo-artifactory-plugin-*.jar release-artifacts/
          cp target/bamboo-artifactory-plugin-*.obr release-artifacts/
          ls -la release-artifacts/

      - name: Commit version update
        run: |
          git add pom.xml
          git commit -m "Release version ${{ steps.version.outputs.new_version }}"
          git tag -a "v${{ steps.version.outputs.new_version }}" -m "Release v${{ steps.version.outputs.new_version }}"

      - name: Push changes
        run: |
          git push origin master
          git push origin "v${{ steps.version.outputs.new_version }}"

      - name: Generate release notes
        if: github.event.inputs.create_release == 'true'
        id: release_notes
        run: |
          BUILD_DATE=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          cat > release_notes.md << EOF
          ## Bamboo Artifactory Plugin v${{ steps.version.outputs.new_version }}
          
          **Release Information:**
          - **Version:** ${{ steps.version.outputs.new_version }}
          - **Release Date:** ${BUILD_DATE}
          - **Previous Version:** ${{ steps.version.outputs.current_version }}
          
          **What's Changed:**
          See the commit history for detailed changes since the last release.
          
          **Artifacts:**
          - \`bamboo-artifactory-plugin-${{ steps.version.outputs.new_version }}.jar\` - Main plugin JAR
          - \`bamboo-artifactory-plugin-${{ steps.version.outputs.new_version }}.obr\` - OSGi Bundle Repository  
          - \`bamboo-artifactory-plugin-${{ steps.version.outputs.new_version }}-sources.jar\` - Source code
          
          **Installation:**
          1. Download the \`.jar\` file from the assets below
          2. Install via Bamboo Administration → Manage apps → Upload app
          3. Restart your Bamboo instance if required
          
          **Documentation:**
          - [Bamboo Artifactory Plugin User Guide](https://jfrog.com/help/r/jfrog-integrations-documentation/bamboo-artifactory-plug-in)
          - [Atlassian Marketplace](https://plugins.atlassian.com/plugin/details/27818)
          EOF

      - name: Create GitHub Release
        if: github.event.inputs.create_release == 'true'
        uses: ncipollo/release-action@v1
        with:
          tag: "v${{ steps.version.outputs.new_version }}"
          name: "Bamboo Artifactory Plugin v${{ steps.version.outputs.new_version }}"
          bodyFile: release_notes.md
          artifacts: "release-artifacts/*"
          draft: false
          prerelease: ${{ github.event.inputs.pre_release }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update to next SNAPSHOT version
        run: |
          # Calculate next snapshot version
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          IFS='.' read -ra VERSION_PARTS <<< "$NEW_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          NEXT_PATCH=$((PATCH + 1))
          NEXT_SNAPSHOT_VERSION="$MAJOR.$MINOR.$NEXT_PATCH-SNAPSHOT"
          
          echo "Setting next development version to: $NEXT_SNAPSHOT_VERSION"
          mvn versions:set -DnewVersion=$NEXT_SNAPSHOT_VERSION -DgenerateBackupPoms=false
          
          git add pom.xml
          git commit -m "Bump version to $NEXT_SNAPSHOT_VERSION for development"
          git push origin master